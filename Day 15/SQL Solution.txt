Sorting and Grouping

1045. Customers Who Bought All Products
https://leetcode.com/problems/customers-who-bought-all-products/description/?envType=study-plan-v2&envId=top-sql-50
SELECT customer_id FROM Customer  group by customer_id
having COUNT(DISTINCT product_key) = 
(SELECT COUNT(*) FROM Product)

1070. Product Sales Analysis III
https://leetcode.com/problems/product-sales-analysis-iii/description/?envType=study-plan-v2&envId=top-sql-50
SELECT product_id, year AS first_year, quantity, price FROM Sales
WHERE (product_id, year) IN (SELECT product_id, MIN(year) AS year FROM Sales group by product_id)

2356. Number of Unique Subjects Taught by Each Teacher
https://leetcode.com/problems/number-of-unique-subjects-taught-by-each-teacher/?envType=study-plan-v2&envId=top-sql-50
SELECT teacher_id, COUNT(DISTINCT subject_id) 
AS cnt FROM Teacher
GROUP BY teacher_id

1141. User Activity for the Past 30 Days I
https://leetcode.com/problems/user-activity-for-the-past-30-days-i/?envType=study-plan-v2&envId=top-sql-50
SELECT activity_date as day, COUNT(DISTINCT user_id)
AS active_users  FROM Activity 
WHERE activity_date BETWEEN "2019-06-28" AND "2019-07-27"
GROUP BY activity_date 

596. Classes More Than 5 Students
https://leetcode.com/problems/classes-more-than-5-students/description/?envType=study-plan-v2&envId=top-sql-50
SELECT class FROM Courses 
GROUP BY class
HAVING COUNT(*)>=5

1729. Find Followers Count
https://leetcode.com/problems/find-followers-count/?envType=study-plan-v2&envId=top-sql-50
SELECT user_id, COUNT(DISTINCT follower_id) AS followers_count
FROM Followers GROUP BY  user_id

619. Biggest Single Number
https://leetcode.com/problems/biggest-single-number/description/?envType=study-plan-v2&envId=top-sql-50
SELECT MAX(num) AS num 
FROM MyNumbers 
WHERE num IN (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(*) = 1);


Advanced Select and Joins

1731. The Number of Employees Which Report to Each Employee
https://leetcode.com/problems/the-number-of-employees-which-report-to-each-employee/description/?envType=study-plan-v2&envId=top-sql-50
SELECT e1.employee_id, e1.name, COUNT(e2.employee_id) as reports_count,  ROUND(AVG(e2.age)) as average_age 
FROM Employees e1 JOIN Employees e2 ON e1.employee_id =e2.reports_to
GROUP BY employee_id ORDER BY employee_id

1789. Primary Department for Each Employee
https://leetcode.com/problems/primary-department-for-each-employee/?envType=study-plan-v2&envId=top-sql-50
SELECT DISTINCT employee_id, department_id
FROM Employee
WHERE employee_id IN (
    SELECT employee_id
    FROM Employee
    GROUP BY employee_id
    HAVING COUNT(*) = 1
  )
  OR primary_flag = 'Y'
ORDER BY employee_id;

610. Triangle Judgement
https://leetcode.com/problems/triangle-judgement/description/?envType=study-plan-v2&envId=top-sql-50
SELECT  *,If(x+y>z and x+z>y and y+z>x,"Yes","No") 
as triangle from Triangle;

180. Consecutive Numbers
https://leetcode.com/problems/consecutive-numbers/description/?envType=study-plan-v2&envId=top-sql-50
SELECT DISTINCT(l1.num) AS ConsecutiveNums
FROM logs l1, logs l2, logs l3
WHERE l1.id = l2.id + 1 AND l2.id = l3.id + 1 AND
l1.num = l2.num AND l2.num = l3.num

1164. Product Price at a Given Date
https://leetcode.com/problems/product-price-at-a-given-date/?envType=study-plan-v2&envId=top-sql-50
SELECT product_id, 10 AS price
FROM Products
GROUP BY product_id
HAVING MIN(change_date) > '2019-08-16'
UNION ALL
SELECT product_id, new_price AS price
FROM Products
WHERE (product_id, change_date) IN (
    SELECT product_id, MAX(change_date)
    FROM Products
    WHERE change_date <= '2019-08-16'
    GROUP BY product_id
  )

1907. Count Salary Categories
https://leetcode.com/problems/count-salary-categories/description/?envType=study-plan-v2&envId=top-sql-50
select 'Low Salary' as category, count(*) as accounts_count
from Accounts
where income < 20000
UNION 
select 'High Salary', count(*)
from Accounts 
where income > 50000
UNION
select 'Average Salary', count(*)
from Accounts 
where income >= 20000 && income <= 50000

1204. Last Person to Fit in the Bus
https://leetcode.com/problems/last-person-to-fit-in-the-bus/?envType=study-plan-v2&envId=top-sql-50
SELECT q1.person_name
FROM Queue q1 JOIN Queue q2 ON q1.turn >= q2.turn
GROUP BY q1.turn
HAVING SUM(q2.weight) <= 1000
ORDER BY SUM(q2.weight) DESC
LIMIT 1






